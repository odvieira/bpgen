using Microsoft.EntityFrameworkCore;using Sita.APC.Toolset.Core.Repository;using Sita.APC.Toolset.Domain.Interfaces;using Sita.APC.Toolset.Domain.Models;using Sita.APC.Toolset.Repository.Database;using System.Collections.Generic;using System.Threading.Tasks;namespace Sita.APC.Toolset.Repository{    public class BoardingPassRepository : IRepository<IBoardingPass>    {        public BoardingPassContext Context { get; }        public BoardingPassRepository(BoardingPassContext context)        {            Context = context;        }        public async Task Add(IBoardingPass boardingPass)        {            Context.BoardingPasses.Add((BoardingPass) boardingPass);            await Context.SaveChangesAsync();        }        public async Task Delete(IBoardingPass boardingPass)        {            try            {                Context.BoardingPasses.Remove((BoardingPass) boardingPass);                await Context.SaveChangesAsync();            }            catch (System.Exception)            {                throw;            }        }        public async Task Delete(string id)        {            try            {                Context.BoardingPasses.Remove((BoardingPass) await Find(id));                await Context.SaveChangesAsync();            }            catch (System.Exception)            {                throw;            }        }        public async Task Update(IBoardingPass boardingPass)        {            try            {                Context.BoardingPasses.Update((BoardingPass)boardingPass);                await Context.SaveChangesAsync();            }            catch (System.Exception)            {                throw;            }        }        public async Task<IBoardingPass> Find(string id)        {            var boardingPass = await Context                .BoardingPasses                .Include("Legs")                .Include("Bags")                .AsNoTracking()                .FirstAsync(b => b.BoardingPassId == id);            if (boardingPass == null)                throw new KeyNotFoundException();            return (IBoardingPass) boardingPass;        }        public async Task<List<BoardingPass>> FindAll()        {            return await Context                .BoardingPasses                .Include("Legs")                .Include("Bags")                .AsNoTracking()                .ToListAsync();        }    }}
