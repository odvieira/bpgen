using Sita.APC.Toolset.Core.Common;using Sita.APC.Toolset.Core.Repository;using Sita.APC.Toolset.Domain.Interfaces;using Sita.APC.Toolset.Domain.Models;using Sita.APC.Toolset.Repository;using Sita.APC.Toolset.Services.Interfaces;using System;using System.Collections.Generic;using System.Threading.Tasks;namespace Sita.APC.Toolset.Services.API{    public class BoardingPassAPI : IApplicationProgrammingInterface<BoardingPass>    {        private readonly IBoardingPassService _boardingPassService;        private readonly IHelper _helper;        private readonly IRepository<IBoardingPass> _repository;        public BoardingPassAPI(            IBoardingPassService boardingPassService,            IHelper helper,            IRepository<IBoardingPass> repository        )        {            _boardingPassService = boardingPassService;            _helper = helper;            _repository = repository;        }        public async Task<BoardingPass> Create(BoardingPass boardingPass)        {            _boardingPassService.ValidateBoardingPass(boardingPass);            boardingPass.JulianDateOfIssueOfBoardingPass = _helper.DateStringToJulianDate(boardingPass.DateOfIssueOfBoardingPass);            boardingPass.PassengerNameInBoardingPass = _boardingPassService.GetBarCodePassengerName(boardingPass);            boardingPass.CreatedAt = DateTime.Now;            boardingPass.BoardingPassId = Guid.NewGuid().ToString();            // MUST BE THE LAST THING BECAUSE IT ITERATES OVER THE OTHER FIELDS            boardingPass.BarCodeString = _boardingPassService.GetBarCodeString(boardingPass);            boardingPass.BarCodeStringLenght = boardingPass.BarCodeString.Length.ToString();            await _repository.Add(boardingPass);            return boardingPass;        }        public async Task<List<BoardingPass>> FindAll()        {            return await ((BoardingPassRepository)_repository).FindAll();            //return await ((BoardingPassRepository)_repository)            //        .Context            //        .BoardingPasses            //        .Include("Legs")            //        .Include("Bags")            //        .AsNoTracking()            //        .ToListAsync();        }        public async Task<BoardingPass> Find(string id)        {            return (BoardingPass) await _repository.Find(id);        }        public async Task<BoardingPass> Update(BoardingPass boardingPass)        {            try            {                _boardingPassService.ValidateBoardingPass(boardingPass);                boardingPass.JulianDateOfIssueOfBoardingPass = _helper.DateStringToJulianDate(boardingPass.DateOfIssueOfBoardingPass);                boardingPass.PassengerNameInBoardingPass = _boardingPassService.GetBarCodePassengerName(boardingPass);                boardingPass.BarCodeString = _boardingPassService.GetBarCodeString(boardingPass);                boardingPass.BarCodeStringLenght = boardingPass.BarCodeString.Length.ToString();                await _repository.Update(boardingPass);                                return boardingPass;            }            catch (System.Exception)            {                throw;            }        }                public async Task Delete(string id)        {            await _repository.Delete(id);        }            }    }
