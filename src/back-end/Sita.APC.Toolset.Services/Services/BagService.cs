using Sita.APC.Toolset.Core.Exceptions;using Sita.APC.Toolset.Domain.Interfaces;using Sita.APC.Toolset.Services.Interfaces;using System.Text.RegularExpressions;namespace Sita.APC.Toolset.Services{    public class BagService : IBagService    {        public BagService() { }        public uint GetUIntTagNumber(IBag bag)        {            return uint.Parse(bag.CarrierInitialTagNumber);        }        public string GetFullBagTag(IBag bag)        {            return bag.BagTag + bag.ConsecutiveBags;        }        public string GetConsecutiveBags(int numberOfBags)        {            if (numberOfBags < 0 || numberOfBags > 999)                throw new InvalidFieldException(nameof(numberOfBags));            return numberOfBags.ToString("000");        }        public string GetBaggageTagLicencePlateNumber(IBag bag, int numberOfBags)        {            return bag.BagTag + GetConsecutiveBags(numberOfBags);        }        public void CreateBag(IBag bag, string bagTag)        {            if (bagTag.Length != 10)                throw new InvalidFieldException(nameof(bagTag));            if (!Regex.IsMatch(bagTag.Substring(0, 1), @"^[012]$"))                throw new InvalidFieldException(nameof(bagTag));            bag.LeadingDigit = bagTag[0].ToString();            if (!Regex.IsMatch(bagTag.Substring(1, 3), @"^\d{3}$"))                throw new InvalidFieldException(nameof(bagTag));            bag.CarrierNumericCode = bagTag.Substring(1, 3);            if (!Regex.IsMatch(bagTag.Substring(4), @"^\d{6}$"))                throw new InvalidFieldException(nameof(bagTag));            bag.CarrierInitialTagNumber = bagTag.Substring(4);            bag.BagTag = bagTag;        }        public void CreateBag(IBag bag)        {            if (bag.BagTag.Length != 10)                throw new InvalidFieldException(nameof(bag.BagTag));            if (!Regex.IsMatch(bag.BagTag.Substring(0, 1), @"^[012]$"))                throw new InvalidFieldException(nameof(bag.BagTag));            bag.LeadingDigit = bag.BagTag[0].ToString();            if (!Regex.IsMatch(bag.BagTag.Substring(1, 3), @"^\d{3}$"))                throw new InvalidFieldException(nameof(bag.BagTag));            bag.CarrierNumericCode = bag.BagTag.Substring(1, 3);            if (!Regex.IsMatch(bag.BagTag.Substring(4), @"^\d{6}$"))                throw new InvalidFieldException(nameof(bag.BagTag));            bag.CarrierInitialTagNumber = bag.BagTag.Substring(4);        }    }}
