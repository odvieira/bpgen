using Sita.APC.Toolset.Core.Common;using Sita.APC.Toolset.Core.Exceptions;using Sita.APC.Toolset.Domain.Interfaces;using Sita.APC.Toolset.Services.Interfaces;using System;using System.Linq;using System.Text.RegularExpressions;namespace Sita.APC.Toolset.Services{    public class LegService : ILegService    {        /*         * *** IMPORTANT ***         * IT IS RECOMMENDED TO USE ONE '_legStandard' PER 'Leg'         * CAUSE 'ForIndividualAirlineUse' IS SET IN RUNTIME         * SO THE INJECTION MUST NOT SHARE DATA BETWEEN CONTEXTS         *          * PAY ATTENTION FOR INCONSISTENCES HERE!!        */        private readonly IHelper _helper;        private readonly ILegStandard _legStandard;        public LegService(IHelper helper, ILegStandard legStandard)        {            _helper = helper;            _legStandard = legStandard;        }         public string GetFieldSizeOfFollowingStructuredMessageRepeated()        {            return (                _legStandard.AirlineNumericCodeExpectedSize +                _legStandard.DocumentFormSerialNumberExpectedSize +                _legStandard.SelecteeIndicatorExpectedSize +                _legStandard.InternationalDocumentationVerificationExpectedSize +                _legStandard.MarketingCarrierDesignatorExpectedSize +                _legStandard.FrequentFlyerAirlineDesignatorExpectedSize +                _legStandard.FrequentFlyerNumberExpectedSize +                _legStandard.IdAdIndicatorExpectedSize +                _legStandard.FreeBaggageAllowanceExpectedSize +                _legStandard.FastTrackExpectedSize            ).ToString("X");        }        public int GetForIndividualAirlineUseLenghtRepeated(ILeg leg)        {            var FieldSizeOfFollowingStructuredMessageRepeated = Convert.ToInt32(                    GetFieldSizeOfFollowingStructuredMessageRepeated(),                    16                );            if (                leg.ForIndividualAirlineUse.Length >                    256 -                    FieldSizeOfFollowingStructuredMessageRepeated            )                throw new InvalidFieldException(nameof(leg.ForIndividualAirlineUse));            return leg.ForIndividualAirlineUse.Length;        }        public string GetFieldSizeOfFollowingVariableSizeField(ILeg leg)        {            var FieldSizeOfFollowingStructuredMessageRepeated = Convert.ToInt32(                    GetFieldSizeOfFollowingStructuredMessageRepeated(),                    16                );            return (                GetForIndividualAirlineUseLenghtRepeated(leg) +                FieldSizeOfFollowingStructuredMessageRepeated            ).ToString("X");        }        public string GetStringOfMandatoryItems(ILeg leg)        {            // Removing the year's char 'cause it is not shown in this part            leg.JulianDateOfFlight = _helper.DateStringToJulianDate(leg.DateOfFlight).Substring(1);            return _helper.GetBarCodeGenericField(leg.OperatingCarrierPNRCode, _legStandard.OperatingCarrierPNRCodeExpectedSize) +                   _helper.GetBarCodeGenericField(leg.FromCityAirportCode, _legStandard.FromCityAirportCodeExpectedSize) +                   _helper.GetBarCodeGenericField(leg.ToCityAirportCode, _legStandard.ToCityAirportCodeExpectedSize) +                   _helper.GetBarCodeGenericField(leg.OperatingCarrierDesignator, _legStandard.OperatingCarrierDesignatorExpectedSize) +                   _helper.GetBarCodeGenericField(leg.FlightNumber, _legStandard.FlightNumberExpectedSize) +                   _helper.GetBarCodeGenericField(leg.JulianDateOfFlight, _legStandard.DateOfFlightExpectedSize) +                   _helper.GetBarCodeGenericField(leg.CompartmentCode, _legStandard.CompartmentCodeExpectedSize) +                   _helper.GetBarCodeGenericField(leg.SeatNumber, _legStandard.SeatNumberExpectedSize) +                   _helper.GetBarCodeGenericField(leg.CheckInSequenceNumber, _legStandard.CheckInSequenceNumberExpectedSize) +                   _helper.GetBarCodeGenericField(leg.PassengerStatus, _legStandard.PassengerStatusExpectedSize) +                   _helper.GetBarCodeGenericField(leg.FieldSizeOfFollowingVariableSizeField, _legStandard.FieldSizeOfFollowingVariableSizeFieldExpectedSize);        }        public string GetStringOfConditionalItems(ILeg leg)        {            return _helper.GetBarCodeGenericField(leg.FieldSizeOfFollowingStructuredMessageRepeated, _legStandard.FieldSizeOfFollowingStructuredMessageRepeatedExpectedSize) +                   _helper.GetBarCodeGenericField(leg.AirlineNumericCode, _legStandard.AirlineNumericCodeExpectedSize) +                   _helper.GetBarCodeGenericField(leg.DocumentFormSerialNumber, _legStandard.DocumentFormSerialNumberExpectedSize) +                   _helper.GetBarCodeGenericField(leg.SelecteeIndicator, _legStandard.SelecteeIndicatorExpectedSize) +                   _helper.GetBarCodeGenericField(leg.InternationalDocumentationVerification, _legStandard.InternationalDocumentationVerificationExpectedSize) +                   _helper.GetBarCodeGenericField(leg.MarketingCarrierDesignator, _legStandard.MarketingCarrierDesignatorExpectedSize) +                   _helper.GetBarCodeGenericField(leg.FrequentFlyerAirlineDesignator, _legStandard.FrequentFlyerAirlineDesignatorExpectedSize) +                   _helper.GetBarCodeGenericField(leg.FrequentFlyerNumber, _legStandard.FrequentFlyerNumberExpectedSize) +                   _helper.GetBarCodeGenericField(leg.IdAdIndicator, _legStandard.IdAdIndicatorExpectedSize) +                   _helper.GetBarCodeGenericField(leg.FreeBaggageAllowance, _legStandard.FreeBaggageAllowanceExpectedSize) +                   _helper.GetBarCodeGenericField(leg.FastTrack, _legStandard.FastTrackExpectedSize) +                   _helper.GetBarCodeGenericField(leg.ForIndividualAirlineUse, GetForIndividualAirlineUseLenghtRepeated(leg)); // THIS DATA COULD NOT BE SHARED        }        public bool ValidateLeg(ILeg leg)        {            try            {                /*                    Mandatory variable fields                        Fields that has an mandatory necessity of being filled                */                if (                    string.IsNullOrEmpty(leg.OperatingCarrierPNRCode) ||                    leg.OperatingCarrierPNRCode.Length > _legStandard.OperatingCarrierPNRCodeExpectedSize                )                    throw new InvalidFieldException(nameof(leg.OperatingCarrierPNRCode));                if (                    string.IsNullOrEmpty(leg.FromCityAirportCode) ||                    leg.FromCityAirportCode.Length > _legStandard.FromCityAirportCodeExpectedSize ||                    !leg.FromCityAirportCode.All(Char.IsLetter)                )                    throw new InvalidFieldException(nameof(leg.FromCityAirportCode));                if (                    string.IsNullOrEmpty(leg.ToCityAirportCode) ||                    leg.ToCityAirportCode.Length > _legStandard.ToCityAirportCodeExpectedSize ||                    !leg.ToCityAirportCode.All(Char.IsLetter)                )                    throw new InvalidFieldException(nameof(leg.ToCityAirportCode));                if (                    string.IsNullOrEmpty(leg.OperatingCarrierDesignator) ||                    leg.OperatingCarrierDesignator.Length > _legStandard.OperatingCarrierDesignatorExpectedSize                )                    throw new InvalidFieldException(nameof(leg.OperatingCarrierDesignator));                if (                    string.IsNullOrEmpty(leg.FlightNumber) ||                    (                        !Regex.IsMatch(leg.FlightNumber, @"^\d{4}$") &&                        !Regex.IsMatch(leg.FlightNumber, @"^\d{4}[a-z]$", RegexOptions.IgnoreCase)                    )                )                    throw new InvalidFieldException(nameof(leg.FlightNumber));                if (                    string.IsNullOrEmpty(leg.DateOfFlight) ||                    !Regex.IsMatch(leg.DateOfFlight, @"^([12]\d{3}\/(0[1-9]|1[0-2])\/(0[1-9]|[12]\d|3[01]))$")                )                    throw new InvalidFieldException(nameof(leg.DateOfFlight));                if (                    string.IsNullOrEmpty(leg.SeatNumber) ||                    !Regex.IsMatch(leg.SeatNumber, @"^\d{3}[a-z]$", RegexOptions.IgnoreCase)                )                    throw new InvalidFieldException(nameof(leg.SeatNumber));                /*                     Mandatory fields with optional filling                        Fields that has default values in case of empty input                */                if (!string.IsNullOrEmpty(leg.CompartmentCode))                {                    if (                        leg.CompartmentCode.Length > _legStandard.CompartmentCodeExpectedSize ||                        !Regex.IsMatch(leg.CompartmentCode, "^[PFAJCDIZWSYBHKLMNQTVX]$", RegexOptions.IgnoreCase)                    )                        throw new InvalidFieldException(nameof(leg.CompartmentCode));                }                else leg.CompartmentCode = "Y";                if (!string.IsNullOrEmpty(leg.CheckInSequenceNumber))                {                    if (                        leg.CheckInSequenceNumber.Length > _legStandard.CheckInSequenceNumberExpectedSize ||                        (                            !Regex.IsMatch(leg.CheckInSequenceNumber, @"^\d{4}$") &&                            !Regex.IsMatch(leg.CheckInSequenceNumber, @"^\d{4}.$", RegexOptions.IgnoreCase)                        )                    )                        throw new InvalidFieldException(nameof(leg.CheckInSequenceNumber));                }                else leg.CheckInSequenceNumber = "0001";                if (!string.IsNullOrEmpty(leg.PassengerStatus))                {                    if (leg.PassengerStatus.Length > _legStandard.PassengerStatusExpectedSize)                        throw new InvalidFieldException(nameof(leg.PassengerStatus));                }                else                    leg.PassengerStatus = "0";                /*                    Conditional fields with mandatory filling                */                if (                    string.IsNullOrEmpty(leg.AirlineNumericCode) ||                    leg.AirlineNumericCode.Length > _legStandard.AirlineNumericCodeExpectedSize ||                    !leg.AirlineNumericCode.All(Char.IsNumber)                )                    throw new InvalidFieldException(nameof(leg.AirlineNumericCode));                leg.AirlineNumericCode = string.Format(                    "{0:D3}",                    int.Parse(leg.AirlineNumericCode)                ); // Right Justifing with leading zeros                if (                    string.IsNullOrEmpty(leg.DocumentFormSerialNumber) ||                    leg.DocumentFormSerialNumber.Length > _legStandard.DocumentFormSerialNumberExpectedSize                )                    throw new InvalidFieldException(nameof(leg.DocumentFormSerialNumber));                leg.DocumentFormSerialNumber = string.Format(                    "{0:D10}",                    int.Parse(leg.DocumentFormSerialNumber)                ); // Right Justifing with leading zeros                if (                    string.IsNullOrEmpty(leg.SelecteeIndicator) ||                    leg.SelecteeIndicator.Length > _legStandard.SelecteeIndicatorExpectedSize // ! Regex.IsMatch(leg.SelecteeIndicator, @"^[01]$")                )                    throw new InvalidFieldException(nameof(leg.SelecteeIndicator));                if (                    string.IsNullOrEmpty(leg.InternationalDocumentationVerification) ||                    leg.InternationalDocumentationVerification.Length > _legStandard.InternationalDocumentationVerificationExpectedSize // ! Regex.IsMatch(leg.InternationalDocumentationVerification, @"^[0-2]$")                )                    throw new InvalidFieldException(nameof(leg.InternationalDocumentationVerification));                if (                    string.IsNullOrEmpty(leg.MarketingCarrierDesignator) ||                    leg.MarketingCarrierDesignator.Length > _legStandard.MarketingCarrierDesignatorExpectedSize                )                    throw new InvalidFieldException(nameof(leg.MarketingCarrierDesignator));                if (                    string.IsNullOrEmpty(leg.FrequentFlyerAirlineDesignator) ||                    leg.FrequentFlyerAirlineDesignator.Length > _legStandard.FrequentFlyerAirlineDesignatorExpectedSize                )                    throw new InvalidFieldException(nameof(leg.FrequentFlyerAirlineDesignator));                if (                    string.IsNullOrEmpty(leg.FrequentFlyerNumber) ||                    leg.FrequentFlyerNumber.Length > _legStandard.FrequentFlyerNumberExpectedSize                )                    throw new InvalidFieldException(nameof(leg.FrequentFlyerNumber));                if (                    string.IsNullOrEmpty(leg.IdAdIndicator) ||                    leg.IdAdIndicator.Length > _legStandard.IdAdIndicatorExpectedSize                )                    throw new InvalidFieldException(nameof(leg.IdAdIndicator));                if (                    string.IsNullOrEmpty(leg.FreeBaggageAllowance) ||                    leg.FreeBaggageAllowance.Length > _legStandard.FreeBaggageAllowanceExpectedSize                )                    throw new InvalidFieldException(nameof(leg.FreeBaggageAllowance));                if (                    string.IsNullOrEmpty(leg.FastTrack) ||                    leg.FastTrack.Length > _legStandard.FastTrackExpectedSize                )                    throw new InvalidFieldException(nameof(leg.FastTrack));            }            catch (InvalidFieldException)            {                throw;            }            return true;        }    }}
